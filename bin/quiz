#!/bin/sh

# This is a quiz that test you on your mental day of the week calculation.
# Enter a number from range {1..7} according to the date prompted, with Monday being 1.

DEFAULT_TIMES=10

# getDate generates a random date and find its day of the week
# Output is in this format: "date day-of-the-week"
# DOW(Day of the Week) is a number from range {0..6}, with Monday being 1.
getDate(){
  awk 'function dow(year, month, day) {
    # Function that returns the day of the week of a given date
    # Below is Zellers congruence
    M = 1 + (month + 9) % 12
    if( M > 10) year = year - 1
    return int((int((13*M-1)/5)+int(year+year/4)-int(year/100)+int(year/400)+day)%7)
  }
  # doRanDate generates a random date
  # If the date is valid, it prints the date and day of the week, then returns 1
  # Otherwise it returns 0
  function doRanDate() {
    if( rand() > 0.45 )
      year = int( rand() * 150 + 1900 )
    else
      year = int( rand() * 700 + 1600 )
    # Tweak year for your own needs, this one is pretty general
    month = int( rand() * 12 + 1 )
    day = int( rand() * 31 + 1 )
    # We have about 365.25/372 probability to get a valid date here
    if( (day>30) && (month==2||month==4||month==6||month==9||month==11) ) {
      return 0
    } else if( month == 2 ) {
      if( day>29 || ((day==29) && (year%4!=0||year%100==0) && (year%400!=0)) )
        return 0
    }
    printf "%d-%d-%d ", year, month, day
    print dow(year, month, day)
    return 1
  }
  BEGIN {
    srand('"$NONCE$(date +%s)"')
    while(!doRanDate()) {}
  }'
}

# testDate performs the test with a random date
testDate(){
  NONCE=$((NONCE + 1))
  DATE_DOW="$(getDate)"
  DATE="${DATE_DOW% *}"
  DOW="${DATE_DOW#* }"
  echo $DATE
  read R
  if [ $((R % 7)) = $((DOW % 7)) -a "$R" != "" ]; then
    printf '%s\n\n' "Correct!"
    return 0
  else
    printf '%s\n\n' "The correct day of the week is $DOW"
    return 1
  fi
}

# The main()
quiz(){
  NONCE=0
  ERRORS=0
  I=0
  START_TIME=`date +%s`
  while [ $I -lt $1 ]; do
    testDate
    RETURN_CODE=$?
    ERRORS=$((ERRORS + RETURN_CODE))
    I=$((I + 1))
  done
  AVG_TIME=$(awk "BEGIN {print( $(date +%s) - $START_TIME ) / $1}")
  SCORE=$(awk "BEGIN {print ( $1 - $ERRORS ) * 100 / $1}")
  echo "Average time: $AVG_TIME secs, ${SCORE}% correct"
}

[ "$1" != "" ] && quiz $1 || quiz $DEFAULT_TIMES

